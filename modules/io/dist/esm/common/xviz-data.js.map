{"version":3,"sources":["../../../src/common/xviz-data.js"],"names":["getDataContainer","parseBinaryXVIZ","isGLBXVIZ","isJSONString","isPBEXVIZ","getXVIZMessageType","XVIZMessage","TextDecoder","XVIZ_FORMAT","XVIZData","data","_data","_dataFormat","undefined","_xvizType","_message","_determineFormat","Error","msg","BINARY_GLB","Buffer","buffer","slice","byteOffset","byteLength","BINARY_PBE","JSON_BUFFER","jsonString","toString","ArrayBuffer","isView","Uint8Array","decode","JSON","parse","JSON_STRING","OBJECT","xvizMsg","type","rawType","parts","split","namespace"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global Buffer */\n/* eslint-disable complexity */\nimport {\n  getDataContainer,\n  parseBinaryXVIZ,\n  isGLBXVIZ,\n  isJSONString,\n  isPBEXVIZ,\n  getXVIZMessageType\n} from './loaders';\nimport {XVIZMessage} from './xviz-message';\nimport {TextDecoder} from './text-encoding';\nimport {XVIZ_FORMAT} from './constants';\n\n// Represents raw xviz data and\n// can create an XVIZMessage\n//\n// Assume isXVIZMessage has been called\n//\n// Raw data formats supported:\n// - JSON string\n// - arraybuffer which is a JSON string\n// - JSON object\n// - arraybuffer which is a GLB\nexport class XVIZData {\n  constructor(data) {\n    this._data = data;\n\n    // _dataFormat is an XVIZ_FORMAT for 'data'\n    this._dataFormat = undefined;\n\n    // _xvizType is the XVIZ Envelope 'type'\n    this._xvizType = undefined;\n\n    // _message is an XVIZMessage and has been fully parsed\n    this._message = undefined;\n\n    this._determineFormat();\n\n    if (!this._dataFormat) {\n      throw new Error('Unknown XVIZ data format');\n    }\n  }\n\n  get buffer() {\n    return this._data;\n  }\n\n  get format() {\n    return this._dataFormat;\n  }\n\n  // In some cases this can be as expensive as a parse, so we do not\n  // load this unless asked for explicitly.\n  get type() {\n    if (this._message) {\n      return this._message.type;\n    } else if (!this._xvizType) {\n      const rawType = getXVIZMessageType(this._data);\n      if (rawType) {\n        const parts = rawType.split('/');\n        this._xvizType = {\n          namespace: parts[0],\n          type: parts[1]\n        };\n      }\n    }\n\n    return this._xvizType.type;\n  }\n\n  hasMessage() {\n    return this._message !== undefined;\n  }\n\n  // converts data to JS object\n  message() {\n    let msg = null;\n    if (this._message) {\n      return this._message;\n    }\n\n    let data = this._data;\n    switch (this._dataFormat) {\n      case XVIZ_FORMAT.BINARY_GLB:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data);\n        break;\n      case XVIZ_FORMAT.BINARY_PBE:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data);\n        break;\n      case XVIZ_FORMAT.JSON_BUFFER:\n        let jsonString = null;\n        if (data instanceof Buffer) {\n          // Default to utf8 encoding\n          jsonString = data.toString();\n        } else if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n          data = new Uint8Array(data);\n\n          // This is slow\n          jsonString = new TextDecoder('utf8').decode(data);\n        }\n\n        msg = JSON.parse(jsonString);\n        break;\n      case XVIZ_FORMAT.JSON_STRING:\n        msg = JSON.parse(data);\n        break;\n      case XVIZ_FORMAT.OBJECT:\n        msg = data;\n        break;\n      default:\n        throw new Error(`Unsupported format ${this._dataFormat}`);\n    }\n\n    const xvizMsg = new XVIZMessage(msg);\n    if (xvizMsg.data) {\n      this._message = xvizMsg;\n      return this._message;\n    }\n\n    return null;\n  }\n\n  _determineFormat() {\n    let data = this._data;\n    switch (getDataContainer(data)) {\n      case 'binary':\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n\n        if (isPBEXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_PBE;\n        } else if (isGLBXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_GLB;\n        } else {\n          if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n          }\n\n          if (isJSONString(data)) {\n            this._dataFormat = XVIZ_FORMAT.JSON_BUFFER;\n          }\n        }\n        break;\n      case 'string':\n        if (isJSONString(data)) {\n          this._dataFormat = XVIZ_FORMAT.JSON_STRING;\n        }\n        break;\n      case 'object':\n        this._dataFormat = XVIZ_FORMAT.OBJECT;\n        break;\n\n      default:\n    }\n  }\n}\n"],"file":"xviz-data.js"}