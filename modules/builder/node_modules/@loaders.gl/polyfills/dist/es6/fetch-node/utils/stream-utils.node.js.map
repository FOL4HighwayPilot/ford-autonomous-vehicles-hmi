{"version":3,"sources":["../../../../src/fetch-node/utils/stream-utils.node.js"],"names":["concatenateReadStream","readStream","arrayBuffer","ArrayBuffer","string","Promise","resolve","reject","data","chunk","concatenateArrayBuffers","on","error","complete","source1","source2","sourceArray1","Uint8Array","sourceArray2","temp","byteLength","set"],"mappings":"AACA,OAAO,SAASA,qBAAT,CAA+BC,UAA/B,EAA2C;AAChD,MAAIC,WAAW,GAAG,IAAIC,WAAJ,EAAlB;AACA,MAAIC,MAAM,GAAG,EAAb;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,UAAU,CAACO,IAAX,CAAgBC,KAAK,IAAI;AACvB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BL,QAAAA,MAAM,IAAIK,KAAV;AACD,OAFD,MAEO;AACLP,QAAAA,WAAW,GAAGQ,uBAAuB,CAACR,WAAD,EAAcO,KAAd,CAArC;AACD;AACF,KAND;AAOAR,IAAAA,UAAU,CAACU,EAAX,CAAc,OAAd,EAAuBC,KAAK,IAAIL,MAAM,CAACK,KAAD,CAAtC;AAEAX,IAAAA,UAAU,CAACU,EAAX,CAAc,KAAd,EAAqB,MAAM;AACzB,UAAIV,UAAU,CAACY,QAAf,EAAyB;AACvBP,QAAAA,OAAO,CAACJ,WAAW,IAAIE,MAAhB,CAAP;AACD,OAFD,MAEO;AACLG,QAAAA,MAAM,CAAC,sEAAD,CAAN;AACD;AACF,KAND;AAOD,GAjBM,CAAP;AAkBD;;AAED,SAASG,uBAAT,CAAiCI,OAAjC,EAA0CC,OAA1C,EAAmD;AACjD,QAAMC,YAAY,GAAGF,OAAO,YAAYX,WAAnB,GAAiC,IAAIc,UAAJ,CAAeH,OAAf,CAAjC,GAA2DA,OAAhF;AACA,QAAMI,YAAY,GAAGH,OAAO,YAAYZ,WAAnB,GAAiC,IAAIc,UAAJ,CAAeF,OAAf,CAAjC,GAA2DA,OAAhF;AACA,QAAMI,IAAI,GAAG,IAAIF,UAAJ,CAAeD,YAAY,CAACI,UAAb,GAA0BF,YAAY,CAACE,UAAtD,CAAb;AACAD,EAAAA,IAAI,CAACE,GAAL,CAASL,YAAT,EAAuB,CAAvB;AACAG,EAAAA,IAAI,CAACE,GAAL,CAASH,YAAT,EAAuBF,YAAY,CAACI,UAApC;AACA,SAAOD,IAAP;AACD","sourcesContent":["// TODO - remove? can this be handled via corresponding AsyncIterator function?\nexport function concatenateReadStream(readStream) {\n  let arrayBuffer = new ArrayBuffer();\n  let string = '';\n\n  return new Promise((resolve, reject) => {\n    readStream.data(chunk => {\n      if (typeof chunk === 'string') {\n        string += chunk;\n      } else {\n        arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n      }\n    });\n    readStream.on('error', error => reject(error));\n\n    readStream.on('end', () => {\n      if (readStream.complete) {\n        resolve(arrayBuffer || string);\n      } else {\n        reject('The connection was terminated while the message was still being sent');\n      }\n    });\n  });\n}\n\nfunction concatenateArrayBuffers(source1, source2) {\n  const sourceArray1 = source1 instanceof ArrayBuffer ? new Uint8Array(source1) : source1;\n  const sourceArray2 = source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2;\n  const temp = new Uint8Array(sourceArray1.byteLength + sourceArray2.byteLength);\n  temp.set(sourceArray1, 0);\n  temp.set(sourceArray2, sourceArray1.byteLength);\n  return temp;\n}\n"],"file":"stream-utils.node.js"}