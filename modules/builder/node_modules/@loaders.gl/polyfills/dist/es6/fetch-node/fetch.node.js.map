{"version":3,"sources":["../../../src/fetch-node/fetch.node.js"],"names":["fs","http","https","util","toArrayBuffer","decodeDataUri","concatenateReadStream","Headers","DEFAULT_OPTIONS","dataType","isDataURL","url","startsWith","isRequestURL","NodeFetchResponse","constructor","options","bodyUsed","_headers","headers","_getHeaders","body","createReadStream","arrayBuffer","readFile","text","textDecoder","TextDecoder","decode","json","JSON","parse","httpResponse","httpHeaders","getHeaders","name","header","String","contentLength","_getContentLength","Number","isFinite","length","stats","statSync","size","fetchNode","getReadFileOptions","Object","assign","responseType","encoding","Promise","resolve","reject","URL","request","response","then","queryIndex","lastIndexOf","substr","readFileAsync","promisify","buffer","Buffer"],"mappings":"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","sourcesContent":["/* global URL */\n/* global Buffer */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\n\n/* global TextDecoder */\n\nimport {toArrayBuffer} from './utils/to-array-buffer.node';\nimport decodeDataUri from './utils/decode-data-uri.node';\nimport {concatenateReadStream} from './utils/stream-utils.node';\nimport Headers from './headers.node';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer'\n};\n\n// const isNode = Boolean(fs && fs.readFile);\n\nconst isDataURL = url => url.startsWith('data:');\nconst isRequestURL = url => url.startsWith('http:') || url.startsWith('https:');\n\n// Under Node.js we return a mock \"fetch response object\"\n// so that apps can use the same API as in the browser.\n//\n// Note: This is intended to be a lightweight implementation and will have limitations.\n// Apps that require more complete fech emulation in Node\n// are encouraged to use dedicated fetch polyfill modules.\n\n// See https://developer.mozilla.org/en-US/docs/Web/API/Response\nclass NodeFetchResponse {\n  constructor(url, options) {\n    this.url = url;\n    this.options = options;\n    this.bodyUsed = false;\n    this._headers = null;\n  }\n\n  // Subset of Properties\n\n  // get url()\n  get headers() {\n    this._headers = this._headers || this._getHeaders();\n  }\n\n  // Returns a readable stream to the \"body\" of the response (or file)\n  get body() {\n    const {url, options} = this;\n    this.bodyUsed = true;\n    return createReadStream(url, options);\n  }\n\n  // Subset of Methods\n\n  async arrayBuffer() {\n    this.bodyUsed = true;\n    return readFile(this.url, this.options);\n  }\n\n  async text() {\n    const arrayBuffer = await this.arrayBuffer();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(arrayBuffer);\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  // PRIVATE\n\n  _getHeaders() {\n    // Under Node.js we return a mock \"fetch response object\"\n    // so that apps can use the same API as in the browser.\n    //\n    // Note: This is intended to be a lightweight implementation and will have limitations.\n    // Apps that require more complete fech emulation in Node\n    // are encouraged to use dedicated fetch polyfill modules.\n\n    const headers = {};\n\n    if (this.httpResponse) {\n      const httpHeaders = this.httpResponse.getHeaders();\n      for (const name in httpHeaders) {\n        const header = headers[name];\n        headers[name] = String(header);\n      }\n    } else {\n      const contentLength = this._getContentLength();\n      if (Number.isFinite(contentLength)) {\n        headers['Content-Length'] = contentLength;\n      }\n    }\n\n    return new Headers(headers);\n  }\n\n  _getContentLength() {\n    if (isRequestURL(this.url)) {\n      // Needs to be read from actual headers\n      return null;\n    } else if (isDataURL(this.url)) {\n      return this.url.length - 'data://'.length;\n    }\n    // File URL\n    // TODO - how to handle non-existing file, this presumably just throws\n    const stats = fs.statSync(this.url);\n    return stats.size;\n  }\n}\n\nexport default function fetchNode(url, options) {\n  return new NodeFetchResponse(url, options);\n}\n\n// HELPERS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  if (fs) {\n    // set encoding for fs.readFile\n    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);\n  }\n  return options;\n}\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nasync function readFile(url, options = {}) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return Promise.resolve(decodeDataUri(url));\n  }\n\n  if (isRequestURL(url)) {\n    return new Promise((resolve, reject) => {\n      options = {...new URL(url), ...options};\n      const request = url.startsWith('https:') ? https.request : http.request;\n      request(url, response => concatenateReadStream(response).then(resolve, reject));\n    });\n  }\n\n  // Remove any query parameters when loading from file\n  const queryIndex = url && url.lastIndexOf('?');\n  url = queryIndex >= 0 ? url.substr(0, queryIndex) : url;\n\n  const readFileAsync = util.promisify(fs.readFile);\n  const buffer = await readFileAsync(url, options);\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// Returns a promise that resolves to a readable stream\nasync function createReadStream(url, options) {\n  // Handle data urls in node, to match `fetch``\n  if (isDataURL(url)) {\n    // TODO - need to return a stream wrapper\n    return decodeDataUri(url);\n  }\n\n  // Handle file streams in node\n  if (!isRequestURL(url)) {\n    return fs.createReadStream(url, options);\n  }\n\n  // HANDLE HTTP/HTTPS REQUESTS IN NODE\n  return new Promise((resolve, reject) => {\n    /* TODO - URL not available in Node.js v8? */\n    options = {...new URL(url), ...options};\n    const request = url.startsWith('https:') ? https.request : http.request;\n    request(url, response => resolve(response));\n  });\n}\n"],"file":"fetch.node.js"}