{"version":3,"sources":["../../../src/fetch-node/headers.node.js"],"names":["Headers","headers","map","forEach","value","name","append","Array","isArray","header","Object","getOwnPropertyNames","normalizeName","normalizeValue","oldValue","has","hasOwnProperty","callback","thisArg","call","items","push","iteratorFor","Symbol","iterator","entries","String","test","TypeError","toLowerCase","next","shift","done","undefined"],"mappings":"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","sourcesContent":["// Based on https://github.com/github/fetch under MIT license\n\nexport default class Headers {\n  constructor(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  append(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    const oldValue = this.map[name];\n    this.map[name] = oldValue ? `${oldValue}, ${value}` : value;\n  }\n\n  delete(name) {\n    delete this.map[normalizeName(name)];\n  }\n\n  get(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null;\n  }\n\n  has(name) {\n    return this.map.hasOwnProperty(normalizeName(name));\n  }\n\n  set(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  }\n\n  forEach(callback, thisArg) {\n    for (const name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  }\n\n  keys() {\n    const items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items);\n  }\n\n  values() {\n    const items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items);\n  }\n\n  entries() {\n    const items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.entries();\n  }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name);\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name');\n  }\n  return name.toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value);\n  }\n  return value;\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  const iterator = {\n    next() {\n      const value = items.shift();\n      return {done: value === undefined, value};\n    }\n  };\n\n  iterator[Symbol.iterator] = function() {\n    return iterator;\n  };\n\n  return iterator;\n}\n"],"file":"headers.node.js"}