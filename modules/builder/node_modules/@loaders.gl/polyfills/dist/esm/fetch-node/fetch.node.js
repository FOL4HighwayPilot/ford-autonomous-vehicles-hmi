import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import fs from 'fs';
import http from 'http';
import https from 'https';
import util from 'util';
import { toArrayBuffer } from './utils/to-array-buffer.node';
import decodeDataUri from './utils/decode-data-uri.node';
import { concatenateReadStream } from './utils/stream-utils.node';
import Headers from './headers.node';
var DEFAULT_OPTIONS = {
  dataType: 'arraybuffer'
};

var isDataURL = function isDataURL(url) {
  return url.startsWith('data:');
};

var isRequestURL = function isRequestURL(url) {
  return url.startsWith('http:') || url.startsWith('https:');
};

var NodeFetchResponse = function () {
  function NodeFetchResponse(url, options) {
    _classCallCheck(this, NodeFetchResponse);

    this.url = url;
    this.options = options;
    this.bodyUsed = false;
    this._headers = null;
  }

  _createClass(NodeFetchResponse, [{
    key: "arrayBuffer",
    value: function () {
      var _arrayBuffer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.bodyUsed = true;
                return _context.abrupt("return", readFile(this.url, this.options));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function arrayBuffer() {
        return _arrayBuffer.apply(this, arguments);
      }

      return arrayBuffer;
    }()
  }, {
    key: "text",
    value: function () {
      var _text = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
        var arrayBuffer, textDecoder;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.arrayBuffer();

              case 2:
                arrayBuffer = _context2.sent;
                textDecoder = new TextDecoder();
                return _context2.abrupt("return", textDecoder.decode(arrayBuffer));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function text() {
        return _text.apply(this, arguments);
      }

      return text;
    }()
  }, {
    key: "json",
    value: function () {
      var _json = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {
        var text;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.text();

              case 2:
                text = _context3.sent;
                return _context3.abrupt("return", JSON.parse(text));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function json() {
        return _json.apply(this, arguments);
      }

      return json;
    }()
  }, {
    key: "_getHeaders",
    value: function _getHeaders() {
      var headers = {};

      if (this.httpResponse) {
        var httpHeaders = this.httpResponse.getHeaders();

        for (var name in httpHeaders) {
          var header = headers[name];
          headers[name] = String(header);
        }
      } else {
        var contentLength = this._getContentLength();

        if (Number.isFinite(contentLength)) {
          headers['Content-Length'] = contentLength;
        }
      }

      return new Headers(headers);
    }
  }, {
    key: "_getContentLength",
    value: function _getContentLength() {
      if (isRequestURL(this.url)) {
        return null;
      } else if (isDataURL(this.url)) {
        return this.url.length - 'data://'.length;
      }

      var stats = fs.statSync(this.url);
      return stats.size;
    }
  }, {
    key: "headers",
    get: function get() {
      this._headers = this._headers || this._getHeaders();
    }
  }, {
    key: "body",
    get: function get() {
      var url = this.url,
          options = this.options;
      this.bodyUsed = true;
      return createReadStream(url, options);
    }
  }]);

  return NodeFetchResponse;
}();

export default function fetchNode(url, options) {
  return new NodeFetchResponse(url, options);
}

function getReadFileOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  options.responseType = options.responseType || options.dataType;

  if (fs) {
    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);
  }

  return options;
}

function readFile(_x) {
  return _readFile.apply(this, arguments);
}

function _readFile() {
  _readFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(url) {
    var options,
        queryIndex,
        readFileAsync,
        buffer,
        _args4 = arguments;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            options = getReadFileOptions(options);

            if (!isDataURL(url)) {
              _context4.next = 4;
              break;
            }

            return _context4.abrupt("return", Promise.resolve(decodeDataUri(url)));

          case 4:
            if (!isRequestURL(url)) {
              _context4.next = 6;
              break;
            }

            return _context4.abrupt("return", new Promise(function (resolve, reject) {
              options = _objectSpread({}, new URL(url), options);
              var request = url.startsWith('https:') ? https.request : http.request;
              request(url, function (response) {
                return concatenateReadStream(response).then(resolve, reject);
              });
            }));

          case 6:
            queryIndex = url && url.lastIndexOf('?');
            url = queryIndex >= 0 ? url.substr(0, queryIndex) : url;
            readFileAsync = util.promisify(fs.readFile);
            _context4.next = 11;
            return readFileAsync(url, options);

          case 11:
            buffer = _context4.sent;
            return _context4.abrupt("return", buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer);

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _readFile.apply(this, arguments);
}

function createReadStream(_x2, _x3) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(url, options) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!isDataURL(url)) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt("return", decodeDataUri(url));

          case 2:
            if (isRequestURL(url)) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt("return", fs.createReadStream(url, options));

          case 4:
            return _context5.abrupt("return", new Promise(function (resolve, reject) {
              options = _objectSpread({}, new URL(url), options);
              var request = url.startsWith('https:') ? https.request : http.request;
              request(url, function (response) {
                return resolve(response);
              });
            }));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _createReadStream.apply(this, arguments);
}
//# sourceMappingURL=fetch.node.js.map