{"version":3,"sources":["../../../src/parsers/parse-xviz-message-sync.js"],"names":["parseXVIZMessageSync","message","onResult","onError","opts","Blob","xvizData","XVIZData","xvizMsg","data","v2Type","type","undefined","result","parseXVIZData","error","typeKey","update_type","parseTimesliceData","convertPrimitive","XVIZ_MESSAGE_TYPE","METADATA","DONE","ERROR","currentMajorVersion"],"mappings":";;;;;;;;;;;;AAqBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGO,SAASA,oBAAT,CAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,OAAjD,EAA0DC,IAA1D,EAAgE;AAIrE,MAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+BJ,OAAO,YAAYI,IAAtD,EAA4D;AAC1D,iDAAoBJ,OAApB,EAA6BC,QAA7B,EAAuCC,OAAvC;AACA;AACD;;AAED,MAAI;AACF,QAAMG,QAAQ,GAAG,IAAIC,YAAJ,CAAaN,OAAb,CAAjB;AACA,QAAMO,OAAO,GAAGF,QAAQ,CAACL,OAAT,EAAhB;;AAGA,QAAIO,OAAJ,EAAa;AACX,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;AAEA,UAAMC,MAAM,GAAGF,OAAO,CAACG,IAAR,IAAgBC,SAA/B;AAEA,UAAMC,MAAM,GAAGC,aAAa,CAACL,IAAD,kCAAWL,IAAX;AAAiBM,QAAAA,MAAM,EAANA;AAAjB,SAA5B;AAEAR,MAAAA,QAAQ,CAACW,MAAD,CAAR;AACD;AACF,GAdD,CAcE,OAAOE,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACY,KAAD,CAAP;AACD;AACF;;AAEM,SAASD,aAAT,CAAuBL,IAAvB,EAAwC;AAAA,MAAXL,IAAW,uEAAJ,EAAI;AAG7C,MAAMY,OAAO,GAAGZ,IAAI,CAACM,MAAL,IAAeD,IAAI,CAACE,IAApB,IAA4BF,IAAI,CAACR,OAAjC,IAA4CQ,IAAI,CAACQ,WAAjE;;AAEA,UAAQD,OAAR;AACE,SAAK,cAAL;AACE,aAAOE,kBAAkB,CAACT,IAAD,EAAOL,IAAI,CAACe,gBAAZ,CAAzB;;AACF,SAAK,UAAL;AACE,6CACK,wCAAiBV,IAAjB,CADL;AAGEE,QAAAA,IAAI,EAAES,6BAAkBC;AAH1B;;AAKF,SAAK,oBAAL;AACE,6CAAWZ,IAAX;AAAiBE,QAAAA,IAAI,EAAES,6BAAkBE;AAAzC;;AACF,SAAK,OAAL;AACE,6CAAWb,IAAX;AAAiBR,QAAAA,OAAO,EAAE,qBAA1B;AAAiDU,QAAAA,IAAI,EAAES,6BAAkBG;AAAzE;;AAGF,SAAK,MAAL;AACE,6CAAWd,IAAX;AAAiBE,QAAAA,IAAI,EAAES,6BAAkBE;AAAzC;;AACF;AAEE,aAAOJ,kBAAkB,CAACT,IAAD,EAAOL,IAAI,CAACe,gBAAZ,CAAzB;AAnBJ;AAqBD;;AAED,SAASD,kBAAT,CAA4BT,IAA5B,EAAkCU,gBAAlC,EAAoD;AAAA,uBACpB,gCADoB;AAAA,MAC3CK,mBAD2C,kBAC3CA,mBAD2C;;AAGlD,SAAOA,mBAAmB,KAAK,CAAxB,GACH,qCAAqBf,IAArB,EAA2BU,gBAA3B,CADG,GAEH,sCAAqBV,IAArB,EAA2BU,gBAA3B,CAFJ;AAGD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * This file contains parsers for XVIZ log stream protocol.\n * Naming conventions:\n  `message` refers to the raw message received via webSocket.onmessage\n * `data` refers to pre-processed data objects (blob, arraybuffer, JSON object)\n */\n/* global Blob */\nimport {XVIZ_MESSAGE_TYPE} from '../constants';\nimport {XVIZData} from '@xviz/io';\nimport {parseLogMetadata} from './parse-log-metadata';\nimport {parseVideoMessageV1} from './parse-video-message-v1';\nimport parseTimesliceDataV1 from './parse-timeslice-data-v1';\nimport parseTimesliceDataV2 from './parse-timeslice-data-v2';\nimport {getXVIZConfig} from '../config/xviz-config';\n\n// Post processes a stream message to make it easy to use for JavaScript applications\nexport function parseXVIZMessageSync(message, onResult, onError, opts) {\n  // TODO(twojtasz): better message dispatching\n  // here, not all arraybuffer may be image (packed point cloud)\n  // TODO(jlisee): Node.js support for blobs for better unit testing\n  if (typeof Blob !== 'undefined' && message instanceof Blob) {\n    parseVideoMessageV1(message, onResult, onError);\n    return;\n  }\n\n  try {\n    const xvizData = new XVIZData(message);\n    const xvizMsg = xvizData.message();\n\n    // Non-xviz messages will return null\n    if (xvizMsg) {\n      const data = xvizMsg.data;\n\n      const v2Type = xvizMsg.type || undefined;\n\n      const result = parseXVIZData(data, {...opts, v2Type});\n\n      onResult(result);\n    }\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport function parseXVIZData(data, opts = {}) {\n  // TODO(twojtasz): this data.message is due an\n  // uncoordinated change on the XVIZ server, temporary.\n  const typeKey = opts.v2Type || data.type || data.message || data.update_type;\n\n  switch (typeKey) {\n    case 'state_update':\n      return parseTimesliceData(data, opts.convertPrimitive);\n    case 'metadata':\n      return {\n        ...parseLogMetadata(data),\n        // ensure application sees the metadata type set to the uppercase version\n        type: XVIZ_MESSAGE_TYPE.METADATA\n      };\n    case 'transform_log_done':\n      return {...data, type: XVIZ_MESSAGE_TYPE.DONE};\n    case 'error':\n      return {...data, message: 'Stream server error', type: XVIZ_MESSAGE_TYPE.ERROR};\n\n    // v1 types\n    case 'done':\n      return {...data, type: XVIZ_MESSAGE_TYPE.DONE};\n    default:\n      //  TODO(twojtasz): XVIZ should be tagging this with a type\n      return parseTimesliceData(data, opts.convertPrimitive);\n  }\n}\n\nfunction parseTimesliceData(data, convertPrimitive) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  return currentMajorVersion === 1\n    ? parseTimesliceDataV1(data, convertPrimitive)\n    : parseTimesliceDataV2(data, convertPrimitive);\n}\n"],"file":"parse-xviz-message-sync.js"}