{"version":3,"sources":["../../../src/parsers/parse-xviz-message-workerfarm.js"],"names":["workerFarm","getWorkerFarm","destroyWorkerFarm","destroy","initializeWorkerFarm","worker","maxConcurrency","capacity","xvizConfig","preProcessPrimitive","workerURL","blob","Blob","streamDataWorker","type","URL","createObjectURL","WorkerFarm","initialMessage","updateWorkerXVIZVersion","broadcast"],"mappings":";;;;;;;;;;;;;;AAeA;;AACA;;;;;;;AAGA,IAAIA,UAAU,GAAG,IAAjB;;AAEO,SAASC,aAAT,GAAyB;AAC9B,SAAOD,UAAP;AACD;;AAGM,SAASE,iBAAT,GAA6B;AAClC,MAAIF,UAAJ,EAAgB;AACdA,IAAAA,UAAU,CAACG,OAAX;AACAH,IAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AAEM,SAASI,oBAAT,OAA6E;AAAA,MAA9CC,MAA8C,QAA9CA,MAA8C;AAAA,iCAAtCC,cAAsC;AAAA,MAAtCA,cAAsC,oCAArB,CAAqB;AAAA,2BAAlBC,QAAkB;AAAA,MAAlBA,QAAkB,8BAAP,IAAO;;AAClF,MAAI,CAACP,UAAL,EAAiB;AACf,QAAMQ,UAAU,qBAAO,gCAAP,CAAhB;;AACA,WAAOA,UAAU,CAACC,mBAAlB;AACA,QAAIC,SAAJ;;AAEA,QAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;AAE9BK,MAAAA,SAAS,GAAGL,MAAZ;AACD,KAHD,MAGO;AAEL,UAAMM,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACC,gBAAD,CAAT,EAA6B;AAACC,QAAAA,IAAI,EAAE;AAAP,OAA7B,CAAb;AACAJ,MAAAA,SAAS,GAAGK,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAZ;AACD;;AAEDX,IAAAA,UAAU,GAAG,IAAIiB,uBAAJ,CAAe;AAC1BP,MAAAA,SAAS,EAATA,SAD0B;AAE1BJ,MAAAA,cAAc,EAAdA,cAF0B;AAG1BC,MAAAA,QAAQ,EAARA,QAH0B;AAI1BW,MAAAA,cAAc,EAAE;AAACV,QAAAA,UAAU,EAAVA;AAAD;AAJU,KAAf,CAAb;AAMD;AACF;;AAEM,SAASW,uBAAT,GAAmC;AACxC,MAAInB,UAAJ,EAAgB;AACd,QAAMQ,UAAU,qBAAO,gCAAP,CAAhB;;AACA,WAAOA,UAAU,CAACC,mBAAlB;AAEAT,IAAAA,UAAU,CAACoB,SAAX,CAAqB;AAACZ,MAAAA,UAAU,EAAVA;AAAD,KAArB;AACD;AACF;;AAID,2CAA0BW,uBAA1B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global Blob, URL */\nimport {WorkerFarm} from '../utils/worker-utils';\nimport {getXVIZConfig, subscribeXVIZConfigChange} from '../config/xviz-config';\nimport streamDataWorker from '../../dist/workers/stream-data.worker.js';\n\nlet workerFarm = null;\n\nexport function getWorkerFarm() {\n  return workerFarm;\n}\n\n// Mainly for testing\nexport function destroyWorkerFarm() {\n  if (workerFarm) {\n    workerFarm.destroy();\n    workerFarm = null;\n  }\n}\n\nexport function initializeWorkerFarm({worker, maxConcurrency = 4, capacity = null}) {\n  if (!workerFarm) {\n    const xvizConfig = {...getXVIZConfig()};\n    delete xvizConfig.preProcessPrimitive;\n    let workerURL;\n\n    if (typeof worker === 'string') {\n      // worker is an URL\n      workerURL = worker;\n    } else {\n      // use default worker\n      const blob = new Blob([streamDataWorker], {type: 'application/javascript'});\n      workerURL = URL.createObjectURL(blob);\n    }\n\n    workerFarm = new WorkerFarm({\n      workerURL,\n      maxConcurrency,\n      capacity,\n      initialMessage: {xvizConfig}\n    });\n  }\n}\n\nexport function updateWorkerXVIZVersion() {\n  if (workerFarm) {\n    const xvizConfig = {...getXVIZConfig()};\n    delete xvizConfig.preProcessPrimitive;\n\n    workerFarm.broadcast({xvizConfig});\n  }\n}\n\n// Subscribe to XVIZConfig changes so we can\n// update WebWorkers to adapt to XVIZ version changes\nsubscribeXVIZConfigChange(updateWorkerXVIZVersion);\n"],"file":"parse-xviz-message-workerfarm.js"}