{"version":3,"sources":["../../../src/middlewares/xviz-provider-request-handler.js"],"names":["Stats","XVIZEnvelope","DEFAULT_OPTIONS","delay","XVIZProviderRequestHandler","constructor","context","provider","middleware","options","metrics","id","Object","assign","_setupContext","metadata","xvizMetadata","message","data","log_info","start_time","end_time","set","onStart","msg","error","onError","Error","message_format","profile","session_type","onMetadata","_setupTransformMetrics","totalTimer","get","loadTimer","sendTimer","onTransformLog","_clearActiveTransforms","_startTransform","onTransformPointInTime","onReconfigure","log","logger","_sendStateUpdate","transformState","interval","iterator","timeStart","clearTimeout","valid","transform","xvizMessage","timeEnd","onStateUpdate","logMsgSent","value","setTimeout","onTransformLogDone","TransformLogDone","logDone","endTransform","reset","transforms","tKey","tformState","request","startTransform","getMessageIterator","startTime","start_timestamp","endTime","end_timestamp","_sendAllStateUpdates","index","verbose","name","lastTiming","toFixed","load","send","total","info","getAverageTime","time","getHz","count"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global setTimeout, clearTimeout */\n/* eslint-disable camelcase, no-unused-expressions */\nimport {Stats} from 'probe.gl';\nimport {XVIZEnvelope} from '@xviz/io';\n\nconst DEFAULT_OPTIONS = {\n  delay: 0 // time in milliseconds\n};\n\n// Server middleware that handles the logic of responding\n// to a request with data from a provider, processing\n// the data through the supplied middleware\nexport class XVIZProviderRequestHandler {\n  constructor(context, provider, middleware, options = {}) {\n    this.context = context;\n    this.provider = provider;\n    this.middleware = middleware;\n\n    this.metrics = new Stats({id: 'xviz-provider-request-handler'});\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    this._setupContext();\n  }\n\n  _setupContext() {\n    // TODO: make a context specific 'configuration' methods\n    // this.context.set('providerSettings', this.provider.settings());\n\n    const metadata = this.provider.xvizMetadata().message();\n    if (metadata && metadata.data && metadata.data.log_info) {\n      const {start_time, end_time} = metadata.data.log_info;\n      if (start_time) {\n        // TODO: make a context specific source methods\n        this.context.set('start_time', start_time);\n      }\n\n      if (end_time) {\n        this.context.set('end_time', start_time);\n      }\n    }\n  }\n\n  onStart(msg) {\n    // TODO; validation\n    const error = null;\n    if (error) {\n      this.middleware.onError(XVIZEnvelope.Error({message: error}));\n    } else {\n      // fill in profile, format, session_type\n      // make context specific configuration fields\n      const message = msg.message();\n      if (message.data.message_format) {\n        this.context.set('message_format', message.data.message_format);\n      } else {\n        this.context.set('message_format', 'BINARY');\n      }\n\n      if (message.data.profile) {\n        this.context.set('profile', message.data.profile);\n      } else {\n        this.context.set('profile', 'default');\n      }\n\n      if (message.data.session_type) {\n        this.context.set('session_type', message.data.session_type);\n      } else {\n        this.context.set('session_type', 'LOG');\n      }\n    }\n\n    // send metadata\n    const metadata = this.provider.xvizMetadata();\n    this.middleware.onMetadata(metadata);\n  }\n\n  _setupTransformMetrics() {\n    return {\n      totalTimer: this.metrics.get(`total`),\n      loadTimer: this.metrics.get(`load`),\n      sendTimer: this.metrics.get(`send`)\n    };\n  }\n\n  onTransformLog(msg) {\n    // TODO: validation\n    const error = null;\n    if (error) {\n      this.middleware.onError(XVIZEnvelope.Error({message: error}));\n    } else {\n      this._clearActiveTransforms();\n      this._startTransform(msg);\n    }\n  }\n\n  onTransformPointInTime(msg) {\n    this.middleware.onError(\n      XVIZEnvelope.Error({message: 'Error: transform_point_in_time is not supported.'})\n    );\n  }\n\n  onReconfigure(msg) {\n    this.middleware.onError(XVIZEnvelope.Error({message: 'Error: reconfigure is not supported.'}));\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n\n  /* eslint-disable complexity */\n  async _sendStateUpdate(id, transformState) {\n    const {delay, interval, iterator} = transformState;\n    const {loadTimer, sendTimer, totalTimer} = transformState;\n\n    if (!interval) {\n      // The interval is only falsy if it is the very first call\n      totalTimer && totalTimer.timeStart();\n    }\n\n    if (interval) {\n      clearTimeout(interval);\n      transformState.interval = null;\n    }\n\n    // End when finished iteration or transform has been removed.\n    if (iterator.valid() && this.context.transform(id)) {\n      loadTimer && loadTimer.timeStart();\n      const data = await this.provider.xvizMessage(iterator);\n      loadTimer && loadTimer.timeEnd();\n\n      if (data) {\n        sendTimer && sendTimer.timeStart();\n        this.middleware.onStateUpdate(data);\n        sendTimer && sendTimer.timeEnd();\n\n        this.logMsgSent(id, iterator.value(), loadTimer, sendTimer);\n      }\n\n      transformState.interval = setTimeout(() => this._sendStateUpdate(id, transformState), delay);\n    } else {\n      this.middleware.onTransformLogDone(XVIZEnvelope.TransformLogDone({id}));\n      totalTimer && totalTimer.timeEnd();\n      this.logDone(id, loadTimer, sendTimer, totalTimer);\n      this.context.endTransform(id);\n      this.metrics.reset();\n    }\n  }\n  /* eslint-enable complexity */\n\n  _clearActiveTransforms() {\n    const transforms = this.context.transforms();\n    // Remove all current inflight transforms from list\n    for (const tKey of transforms) {\n      this.context.endTransform(tKey);\n    }\n  }\n\n  _startTransform(msg) {\n    //  store id, start_timestamp, end_timestamp, desired_streams\n    const message = msg.message();\n    const id = message.data.id;\n\n    // setup new transform request\n    const tformState = {\n      request: message.data,\n      iterator: null,\n      interval: null,\n      delay: this.options.delay,\n      ...this._setupTransformMetrics()\n    };\n    this.context.startTransform(id, tformState);\n\n    tformState.iterator = this.provider.getMessageIterator({\n      startTime: message.data.start_timestamp,\n      endTime: message.data.end_timestamp\n    });\n\n    // send state_updates || error\n    if (tformState.delay < 1) {\n      this._sendAllStateUpdates(id, tformState);\n    } else {\n      this._sendStateUpdate(id, tformState);\n    }\n  }\n\n  async _sendAllStateUpdates(id, transformState) {\n    const {iterator} = transformState;\n    const {loadTimer, sendTimer, totalTimer} = transformState;\n\n    totalTimer && totalTimer.timeStart();\n    // End when finished iteration or transform has been removed.\n    while (iterator.valid() && this.context.transform(id)) {\n      loadTimer && loadTimer.timeStart();\n      const data = await this.provider.xvizMessage(iterator);\n      loadTimer && loadTimer.timeEnd();\n\n      if (data) {\n        sendTimer && sendTimer.timeStart();\n        this.middleware.onStateUpdate(data);\n        sendTimer && sendTimer.timeEnd();\n\n        this.logMsgSent(id, iterator.value(), loadTimer, sendTimer);\n      }\n    }\n\n    this.middleware.onTransformLogDone(XVIZEnvelope.TransformLogDone({id}));\n    totalTimer && totalTimer.timeEnd();\n    this.logDone(id, loadTimer, sendTimer, totalTimer);\n    this.context.endTransform(id);\n    this.metrics.reset();\n  }\n\n  logMsgSent(id, index, loadTimer, sendTimer) {\n    const {logger} = this.options;\n    if (logger && logger.verbose) {\n      let msg = `id: ${id} [< STATE_UPDATE] message: ${index}`;\n      if (loadTimer) {\n        msg += ` ${loadTimer.name}:${loadTimer.lastTiming.toFixed(3)}ms`;\n      }\n      if (sendTimer) {\n        msg += ` ${sendTimer.name}:${sendTimer.lastTiming.toFixed(3)}ms`;\n      }\n\n      logger.verbose(msg);\n    }\n  }\n\n  logDone(id, load, send, total) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      const msg = `id: ${id} [< DONE]`;\n      if (load) {\n        logger.info(\n          `${msg} ${load.name} Avg:${load.getAverageTime().toFixed(3)}ms Total:${load.time.toFixed(\n            3\n          )}ms Hz:${load.getHz().toFixed(3)}/sec Count:${load.count}`\n        );\n      }\n      if (send) {\n        logger.info(\n          `${msg} ${send.name} Avg:${send.getAverageTime().toFixed(3)}ms Total:${send.time.toFixed(\n            3\n          )}ms Hz:${send.getHz().toFixed(3)}/sec Count:${send.count}`\n        );\n      }\n      if (total) {\n        logger.info(`${msg} ${total.name} ${total.lastTiming.toFixed(3)}ms`);\n      }\n    }\n  }\n}\n"],"file":"xviz-provider-request-handler.js"}